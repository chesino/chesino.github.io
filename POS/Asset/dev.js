// Xem dung l∆∞·ª£ng ƒë√£ l∆∞u
function getLocalStorageSizeInKB() {
    let total = 0;
    for (let key in localStorage) {
        if (localStorage.hasOwnProperty(key)) {
            const value = localStorage.getItem(key);
            total += key.length + value.length;
        }
    }
    // m·ªói k√Ω t·ª± ~2 bytes (UTF-16), chuy·ªÉn ra KB
    return (total * 2) / 1024;
}


// DEV
async function logCameraInfo() {
    try {
        const devices = await navigator.mediaDevices.enumerateDevices();

        const videoDevices = devices.filter(device => device.kind === 'videoinput');

        console.log('Danh s√°ch camera:');
        videoDevices.forEach((device, index) => {
            console.log(`Camera ${index + 1}:`);
            console.log(`- Label: ${device.label || 'Kh√¥ng c√≥ (c·∫ßn c·∫•p quy·ªÅn)'}`);
            console.log(`- Device ID: ${device.deviceId}`);
            console.log(`- Group ID: ${device.groupId}`);
            console.log('--------------------------');
        });
    } catch (err) {
        console.error('Kh√¥ng th·ªÉ l·∫•y th√¥ng tin thi·∫øt b·ªã:', err);
    }
}


function checkPassword() {
    const correctPassword = "HunqD"; // ƒê·ªïi th√†nh m·∫≠t kh·∫©u b·∫°n mu·ªën
    const userInput = document.getElementById("passwordInput").value;

    if (userInput === correctPassword) {
        // Hi·ªán t·∫•t c·∫£ c√°c div c√≥ class "dev"
        document.querySelectorAll(".dev").forEach(el => {
            el.style.display = "block";
        });
    } else {
        document.querySelectorAll(".dev").forEach(el => {
            el.style.display = "none";
        });
    }
}

// Ghi l·∫°i console log
(function () {
    const original = {
        log: console.log,
        error: console.error,
        warn: console.warn
    };
    ['log', 'error', 'warn'].forEach(fn => {
        console[fn] = function (...args) {
            original[fn].apply(console, args);
            const out = document.getElementById("commandOutput");
            if (out) {
                out.textContent += `[console.${fn}] ` + args.map(a => typeof a === 'object' ? JSON.stringify(a) : a).join(' ') + '\n';
            }
        };
    });
})();

// Ch·∫°y l·ªánh JS
function runDevCommand() {
    const input = document.getElementById("commandInput").value;
    const outputEl = document.getElementById("commandOutput");
    try {
        const result = eval(input);
        outputEl.textContent += '\n‚úÖ K·∫øt qu·∫£:\n' + formatResult(result) + '\n';
    } catch (e) {
        outputEl.textContent += '\n‚ùå L·ªói:\n' + e.message + '\n';
    }
}

// Format k·∫øt qu·∫£ tr·∫£ v·ªÅ
function formatResult(res) {
    if (typeof res === 'object') {
        try {
            return JSON.stringify(res, null, 2);
        } catch {
            return res.toString();
        }
    }
    return String(res);
}

// Xem dung l∆∞·ª£ng LocalStorage
function getLocalStorageSizeInKB() {
    let total = 0;
    for (let key in localStorage) {
        if (localStorage.hasOwnProperty(key)) {
            const value = localStorage.getItem(key);
            total += key.length + value.length;
        }
    }
    return (total * 2) / 1024;
}

function showLocalStorageSize() {
    const kb = getLocalStorageSizeInKB();
    console.log(`üì¶ LocalStorage ƒëang d√πng kho·∫£ng ${kb.toFixed(2)} KB`);
}

// Camera info
async function logCameraInfo() {
    try {
        const devices = await navigator.mediaDevices.enumerateDevices();
        const videoDevices = devices.filter(device => device.kind === 'videoinput');
        videoDevices.forEach((device, index) => {
            console.log(`Camera ${index + 1}:`);
            console.log(`- Label: ${device.label || 'Kh√¥ng c√≥ (c·∫ßn c·∫•p quy·ªÅn)'}`);
            console.log(`- Device ID: ${device.deviceId}`);
            console.log(`- Group ID: ${device.groupId}`);
        });
    } catch (err) {
        console.error('Kh√¥ng th·ªÉ l·∫•y th√¥ng tin thi·∫øt b·ªã:', err);
    }
}

// Hi·ªán c√°c h√†m to√†n c·ª•c
function listGlobalFunctions() {
    const funcs = Object.entries(window)
        .filter(([key, val]) => typeof val === 'function')
        .map(([key]) => key)
        .sort();
    console.log("üìë H√†m to√†n c·ª•c:");
    console.log(funcs.join('\n'));
}

// Hi·ªán bi·∫øn to√†n c·ª•c (kh√¥ng ph·∫£i function)
function listGlobalVariables() {
    const vars = Object.entries(window)
        .filter(([key, val]) => typeof val !== 'function')
        .map(([key]) => key)
        .sort();
    console.log("üåê Bi·∫øn to√†n c·ª•c:");
    console.log(vars.join('\n'));
}

// X√≥a output
function clearConsole() {
    const out = document.getElementById("commandOutput");
    if (out) out.textContent = '';
    console.clear();
}

function listGlobalFunctions() {
    const funcs = Object.entries(window)
        .filter(([key, val]) => typeof val === 'function' && !key.startsWith('on'))
        .map(([key]) => key)
        .sort();

    const ul = document.getElementById("functionList");
    ul.innerHTML = "";

    funcs.forEach(fnName => {
        const li = document.createElement("li");
        li.style.cursor = "pointer";
        li.style.padding = "4px 8px";
        li.style.borderBottom = "1px solid #ddd";
        li.textContent = fnName;
        li.title = `Ch·∫°y th·ª≠ ${fnName}()`;

        li.onclick = () => {
            try {
                const result = window[fnName]();
                logOutput(`‚ñ∂Ô∏è G·ªçi ${fnName}():\n` + formatResult(result));
            } catch (e) {
                logOutput(`‚ùå L·ªói khi ch·∫°y ${fnName}(): ${e.message}`);
            }
        };

        ul.appendChild(li);
    });

    console.log("üìë ƒê√£ li·ªát k√™ " + funcs.length + " h√†m to√†n c·ª•c.");
}

function logOutput(message) {
    const outputEl = document.getElementById("commandOutput");
    outputEl.textContent += message + "\n";
}


function renderTable() {
    const tableBody = document.querySelector("#storageTable tbody");
    tableBody.innerHTML = ''; // X√≥a d·ªØ li·ªáu c≈©

    if (localStorage.length === 0) {
        const row = `<tr><td colspan="3" style="text-align:center;">Kh√¥ng c√≥ d·ªØ li·ªáu</td></tr>`;
        tableBody.innerHTML = row;
        return;
    }

    for (let i = 0; i < localStorage.length; i++) {
        const key = localStorage.key(i);
        const value = localStorage.getItem(key);
        const row = `
        <tr>
          <td>${key}</td>
          <td>${value.length > 100 ? value.substring(0, 100) + "..." : value}</td>
          <td><button onclick="deleteItem('${key}')">Xo√°</button></td>
        </tr>
      `;
        tableBody.innerHTML += row;
    }
}

function deleteItem(key) {
    if (confirm(`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën xo√° "${key}"?`)) {
        localStorage.removeItem(key);
        renderTable();
    }
}

function clearAll() {
    if (confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën xo√° to√†n b·ªô d·ªØ li·ªáu LocalStorage?')) {
        localStorage.clear();
        renderTable();
    }
}

// Khi m·ªü trang, load b·∫£ng
renderTable();




const driver = window.driver.js.driver;

// Danh s√°ch c√°c b∆∞·ªõc
const stepsPart1 = [
    {
        element: '.search-box input',
        popover: {
            title: 'T√¨m ki·∫øm d·ªãch v·ª•',
            description: 'B·∫°n c√≥ th·ªÉ nh·∫≠p t√™n d·ªãch v·ª• ƒë·ªÉ t√¨m nhanh h∆°n.',
            position: 'bottom'
        }
    },
    {
        element: '#scan-barcode',
        popover: {
            title: 'Qu√©t m√£',
            description: 'D√πng n√∫t n√†y ƒë·ªÉ qu√©t m√£ v·∫°ch t√¨m d·ªãch v·ª• nhanh.',
            position: 'left'
        }
    },
    {
        element: '.categories-wrapper',
        popover: {
            title: 'Danh m·ª•c d·ªãch v·ª•',
            description: 'Ch·ªçn danh m·ª•c ƒë·ªÉ l·ªçc c√°c d·ªãch v·ª• theo nhu c·∫ßu.',
            position: 'bottom'
        }
    },
    {
        element: '.products-grid',
        popover: {
            title: 'Danh s√°ch d·ªãch v·ª•',
            description: 'Nh·∫•n v√†o t·ª´ng d·ªãch v·ª• ƒë·ªÉ th√™m v√†o gi·ªè h√†ng.',
            position: 'top'
        }
    },
    {
        element: '.product-item[data-id="2"]',
        popover: {
            title: 'V√≠ d·ª•: C·∫Øt t√≥c',
            description: 'Nh·∫•n v√†o ƒë√¢y ƒë·ªÉ th√™m d·ªãch v·ª• "C·∫Øt t√≥c" v√†o ƒë∆°n.',
            position: 'left'
        }
    }
];

const stepsPart2 = [
    {
        element: '#invoiceSelect',
        popover: {
            title: 'Ch·ªçn gh·∫ø',
            description: 'Ch·ªçn gh·∫ø (ho√° ƒë∆°n) b·∫°n mu·ªën thao t√°c.',
            position: 'bottom'
        }
    },
    {
        element: '#customer-name',
        popover: {
            title: 'Kh√°ch h√†ng',
            description: 'Nh·∫≠p t√™n ho·∫∑c s·ªë ƒëi·ªán tho·∫°i kh√°ch h√†ng.',
            position: 'bottom'
        }
    },
    {
        element: '#addNewCustomerBtn',
        popover: {
            title: 'Th√™m kh√°ch',
            description: 'B·∫•m ƒë·ªÉ th√™m kh√°ch h√†ng m·ªõi.',
            position: 'left'
        }
    },
    {
        element: '#staff-name',
        popover: {
            title: 'Thu ng√¢n',
            description: 'Ch·ªçn ng∆∞·ªùi ƒëang th·ª±c hi·ªán giao d·ªãch.',
            position: 'bottom'
        }
    },
    {
        element: '#cart-items',
        popover: {
            title: 'Gi·ªè h√†ng',
            description: 'Danh s√°ch c√°c d·ªãch v·ª• ho·∫∑c s·∫£n ph·∫©m ƒë√£ ch·ªçn.',
            position: 'top'
        }
    },
    {
        element: '.cart-item:first-child input[type="text"]',
        popover: {
            title: 'T√™n d·ªãch v·ª•',
            description: 'S·ª≠a t√™n d·ªãch v·ª• tr·ª±c ti·∫øp t·∫°i ƒë√¢y.',
            position: 'bottom'
        }
    },
    {
        element: '.cart-item:first-child .cart-item-price',
        popover: {
            title: 'Gi√° d·ªãch v·ª•',
            description: 'Nh·∫≠p ho·∫∑c ƒëi·ªÅu ch·ªânh gi√° ti·ªÅn.',
            position: 'bottom'
        }
    },
    {
        element: '.cart-item:first-child .quantity-value',
        popover: {
            title: 'S·ªë l∆∞·ª£ng',
            description: 'Thay ƒë·ªïi s·ªë l∆∞·ª£ng d·ªãch v·ª•.',
            position: 'bottom'
        }
    },
    {
        element: '.cart-item:first-child .cart-item-remove',
        popover: {
            title: 'Xo√° d·ªãch v·ª•',
            description: 'Nh·∫•n ƒë·ªÉ xo√° d·ªãch v·ª• n√†y kh·ªèi gi·ªè h√†ng.',
            position: 'left'
        }
    },
    {
        element: '#payment-method',
        popover: {
            title: 'Ph∆∞∆°ng th·ª©c thanh to√°n',
            description: 'Ch·ªçn c√°ch kh√°ch h√†ng thanh to√°n.',
            position: 'bottom'
        }
    },
    {
        element: '.switch',
        popover: {
            title: 'Lo·∫°i chi·∫øt kh·∫•u',
            description: 'Chuy·ªÉn ƒë·ªïi gi·ªØa chi·∫øt kh·∫•u ph·∫ßn trƒÉm (%) v√† s·ªë ti·ªÅn (ƒë).',
            position: 'bottom'
        }
    },
    {
        element: '#discount',
        popover: {
            title: 'Chi·∫øt kh·∫•u (%)',
            description: 'Nh·∫≠p s·ªë ph·∫ßn trƒÉm chi·∫øt kh·∫•u n·∫øu ƒëang ch·ªçn theo %.',
            position: 'bottom'
        }
    },
    {
        element: '.option-right',
        popover: {
            title: 'Chi·∫øt kh·∫•u (ƒë)',
            description: 'Ho·∫∑c nh·∫≠p s·ªë ti·ªÅn chi·∫øt kh·∫•u n·∫øu ch·ªçn theo s·ªë ti·ªÅn.',
            position: 'bottom'
        }
    },
    {
        element: '#subtotal',
        popover: {
            title: 'T·ªïng ti·ªÅn',
            description: 'T·ªïng ti·ªÅn h√†ng tr∆∞·ªõc khi chi·∫øt kh·∫•u.',
            position: 'left'
        }
    },
    {
        element: '#discount-info',
        popover: {
            title: 'S·ªë ti·ªÅn chi·∫øt kh·∫•u',
            description: 'ƒê√¢y l√† m·ª©c gi·∫£m gi√° ƒë√£ √°p d·ª•ng.',
            position: 'left'
        }
    },
    {
        element: '#total',
        popover: {
            title: 'Th√†nh ti·ªÅn',
            description: 'S·ªë ti·ªÅn kh√°ch c·∫ßn thanh to√°n sau khi chi·∫øt kh·∫•u.',
            position: 'left'
        }
    },
    {
        element: '.clear-cart',
        popover: {
            title: 'Xo√° gi·ªè h√†ng',
            description: 'Xo√° to√†n b·ªô d·ªãch v·ª• trong gi·ªè h√†ng.',
            position: 'top'
        }
    },
    {
        element: '.print-btn',
        popover: {
            title: 'In ho√° ƒë∆°n',
            description: 'In ho√° ƒë∆°n hi·ªán t·∫°i cho kh√°ch.',
            position: 'top'
        }
    },
    {
        element: '.qr-btn',
        popover: {
            title: 'T·∫°o m√£ QR',
            description: 'T·∫°o m√£ QR t·ª´ ƒë∆°n h√†ng hi·ªán t·∫°i.',
            position: 'top'
        }
    },
    {
        element: '.print-sync-data-btn',
        popover: {
            title: 'In & L∆∞u',
            description: 'In v√† l∆∞u ƒë∆°n h√†ng v√†o h·ªá th·ªëng.',
            position: 'top'
        }
    },
    {
        element: '.sync-data-btn',
        popover: {
            title: 'Ch·ªâ l∆∞u',
            description: 'L∆∞u ƒë∆°n h√†ng m√† kh√¥ng c·∫ßn in.',
            position: 'top'
        }
    },
    {
        popover: {
            title: 'üéâ Ho√†n t·∫•t',
            description: 'B·∫°n ƒë√£ s·∫µn s√†ng s·ª≠ d·ª•ng h·ªá th·ªëng POS!',
        }
    }
];

// H√†m kh·ªüi t·∫°o driver
function createDriver(steps) {
    return driver({
        showProgress: true,
        animate: true,
        showButtons: ['next', 'previous'],
        nextBtnText: 'Ti·∫øp',
        prevBtnText: 'Tr∆∞·ªõc',
        doneBtnText: 'Xong',
        steps
    });
}

// 3 h√†m h∆∞·ªõng d·∫´n:
function startIntroPart1() {
    setTimeout(() => {
        createDriver(stepsPart1).drive();
    }, 1000);

}

function startIntroPart2() {
    setTimeout(() => {
        createDriver(stepsPart2).drive();
    }, 1000);
}

function startIntroAll() {
    setTimeout(() => {
        createDriver([...stepsPart1, ...stepsPart2]).drive();
    }, 1000);
}


function toggleChat() {
    const popup = document.querySelector('.chat-container');
    const display = window.getComputedStyle(popup).display;
    
    popup.style.display = display === 'none' ? 'flex' : 'none';
    
    if (popup.style.display === 'flex') {
        document.getElementById("chatInput").focus();
    }
    

}

function closeChat() {
    document.querySelector('.chat-container').style.display = 'none';
}
function startIntroAndCloseChat() {
    startIntroAll(); // G·ªçi ph·∫ßn intro
    setTimeout(() => {
        closeChat(); // ƒê√≥ng chat sau 1 gi√¢y
    }, 1500);
}


document.getElementById('chatAiBtn').addEventListener('click', toggleChat);
document.getElementById('chatCloseBtn').addEventListener('click', closeChat);

document.getElementById('chatSendBtn').addEventListener('click', async () => {
    const message = document.getElementById('chatInput').value.trim();
    if (message !== '') {
        appendMessage('B·∫°n', message);
        document.getElementById('chatInput').value = '';
        appendMessage('Bot', '<span class="typing">‚óè ‚óè ‚óè</span>');

        // Ph√¢n bi·ªát gi·ªØa online v√† offline
        const botResponse = isBotOnline
            ? await getAiBotResponse(message)
            : await getOfflineResponse(message);

        updateBotMessage(botResponse);
    }
});

document.getElementById('chatInput').addEventListener('keydown', async (e) => {
    if (e.key === 'Enter') {
        e.preventDefault();
        const message = document.getElementById('chatInput').value.trim();
        if (message !== '') {
            appendMessage('B·∫°n', message);
            document.getElementById('chatInput').value = '';
            appendMessage('Bot', '<span class="typing">‚óè ‚óè ‚óè</span>');

            // Ph√¢n bi·ªát gi·ªØa online v√† offline
            const botResponse = isBotOnline
                ? await getAiBotResponse(message)
                : await getOfflineResponse(message);

            updateBotMessage(botResponse);
        }
    }
});


function appendMessage(sender, message) {
    const chatBox = document.getElementById('chatBox');
    const msg = document.createElement('div');

    // X√°c ƒë·ªãnh ng∆∞·ªùi g·ª≠i v√† style hi·ªÉn th·ªã tin nh·∫Øn
    msg.classList.add(sender === 'B·∫°n' ? 'user' : 'bot');

    // X·ª≠ l√Ω markdown ƒë∆°n gi·∫£n (chuy·ªÉn d√≤ng, in ƒë·∫≠m, danh s√°ch)
    const formatted = message
        .replace(/\n/g, '<br>')
        .replace(/\* \*\*(.*?)\*\*/g, '<br>‚Ä¢ <strong>$1</strong>');

    msg.innerHTML = formatted;

    // Th√™m n√∫t copy
    const copyBtn = document.createElement('button');
    copyBtn.innerHTML = '<i class="far fa-clone"></i>';
    copyBtn.className = 'copy-btn';
    copyBtn.onclick = () => {
        navigator.clipboard.writeText(stripHTML(formatted));
        copyBtn.innerHTML = '<i class="far fa-clone"></i>';
        setTimeout(() => copyBtn.innerHTML = 'üìã Copy', 2000);
    };

    msg.appendChild(copyBtn);

    // Th√™m tin nh·∫Øn v√†o h·ªôp chat
    chatBox.appendChild(msg);
    chatBox.scrollTop = chatBox.scrollHeight;
}
// Th√™m tr∆∞·ªõc m·ªçi ƒëo·∫°n code d√πng stripHTML
function stripHTML(html) {
    const tmp = document.createElement("div");
    tmp.innerHTML = html;
    return tmp.textContent || tmp.innerText || "";
}

function formatBotMessage(message) {
    return message
        .replace(/\n/g, '<br>')
        .replace(/\* \*\*(.*?)\*\*/g, '<br>‚Ä¢ <strong>$1</strong>') // markdown danh s√°ch in ƒë·∫≠m
        .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');         // markdown in ƒë·∫≠m
}



function updateBotMessage(message) {
    const chatBox = document.getElementById('chatBox');
    const botMessages = chatBox.querySelectorAll('.bot');

    if (botMessages.length > 0) {
        const lastBotMessage = botMessages[botMessages.length - 1];

        lastBotMessage.innerHTML = '';  // Xo√° "typing..."
        const formatted = formatBotMessage(message);

        // D√πng typeMessage nh∆∞ng ƒë·ª£i g√µ xong r·ªìi m·ªõi th√™m n√∫t copy
        typeMessage(lastBotMessage, formatted, () => {
            const copyBtn = document.createElement('button');
            copyBtn.innerHTML = '<i class="far fa-clone"></i>';
            copyBtn.className = 'copy-btn';
            copyBtn.onclick = () => {
                navigator.clipboard.writeText(stripHTML(formatted));
                copyBtn.innerHTML = '<i class="fas fa-clone"></i>';
                setTimeout(() => copyBtn.innerHTML = '<i class="far fa-clone"></i>', 2000);
            };
            lastBotMessage.appendChild(copyBtn);
        });
    }
}




// H√†m hi·ªÉn th·ªã tin nh·∫Øn d·∫ßn d·∫ßn (gi·ªëng hi·ªáu ·ª©ng g√µ ch·ªØ)
function typeMessage(element, content, callback = null) {
    let index = 0;
    const chatBox = document.getElementById('chatBox');

    const interval = setInterval(() => {
        const char = content.charAt(index);
        // N·∫øu l√† th·∫ª HTML, ch√®n c·∫£ th·∫ª
        if (char === '<') {
            const closeIdx = content.indexOf('>', index);
            element.innerHTML += content.substring(index, closeIdx + 1);
            index = closeIdx + 1;
        } else {
            element.innerHTML += char;
            index++;
        }

        chatBox.scrollTop = chatBox.scrollHeight;

        if (index >= content.length) {
            clearInterval(interval);
            if (callback) callback();  // Th√™m n√∫t copy sau khi g√µ xong
        }
    }, 10); // t·ªëc ƒë·ªô g√µ
}



let responsesData = [];

fetch('../Asset/Data.json')
    .then(response => response.json())
    .then(data => {
        responsesData = data;
    })
    .catch(error => console.error('L·ªói khi t·∫£i d·ªØ li·ªáu:', error));

let isBotOnline = true; // Bi·∫øn tr·∫°ng th√°i to√†n c·ª•c

function setBotMode(mode) {
    if (mode === "online") {
        isBotOnline = true;
        appendMessage('bot', 'ƒê√£ chuy·ªÉn sang ch·∫ø ƒë·ªô AI');
    } else if (mode === "offline") {
        isBotOnline = false;
        appendMessage('bot', 'ƒê√£ chuy·ªÉn sang ch·∫ø ƒë·ªô c·ª•c b·ªô');
    } else {
        // Toggle n·∫øu kh√¥ng c√≥ mode r√µ r√†ng
        isBotOnline = !isBotOnline;
        const message = isBotOnline ? 'ƒê√£ chuy·ªÉn sang ch·∫ø ƒë·ªô AI' : 'ƒê√£ chuy·ªÉn sang ch·∫ø ƒë·ªô c·ª•c b·ªô ‚ÄºÔ∏è ƒëang g·∫∑p l·ªói kh√¥ng th·ªÉ s·ª≠ d·ª•ng';
        appendMessage('bot', message);
    }
    

    const status = document.getElementById('botStatus');
    status.textContent = isBotOnline ? "BIMO AI" : "BIMO Local";
}


async function getAiBotResponse(message) {
    try {
        const response = await fetch(
            'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyAhyil0-osbzYXFYxDNIHH3ObE0I-hzXpk',
            {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    contents: [{
                        parts: [{ text: message }]
                    }]
                })
            }
        );

        const data = await response.json();
        console.log("Ph·∫£n h·ªìi t·ª´ Gemini:", data);

        if (data && data.candidates && data.candidates.length > 0) {
            let reply = data.candidates[0].content.parts[0].text.trim();

            // T√πy ch·ªânh tr·∫£ l·ªùi n·∫øu c·∫ßn
            if (message.toLowerCase().includes("xin ch√†o")) {
                reply = "Ch√†o b·∫°n! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay?";
            } else if (message.toLowerCase().includes("t·∫°m bi·ªát")) {
                reply = "T·∫°m bi·ªát! H·∫πn g·∫∑p l·∫°i b·∫°n!";
            } else if (message.toLowerCase().includes("gi·ªõi thi·ªáu")) {
                reply = "T√¥i l√† tr·ª£ l√Ω AI s·ª≠ d·ª•ng m√¥ h√¨nh Gemini Flash ƒë·ªÉ h·ªó tr·ª£ b·∫°n b·∫±ng ti·∫øng Vi·ªát m·ªôt c√°ch nhanh ch√≥ng v√† th√¢n thi·ªán.";
            }else if (message.toLowerCase().includes("h·ªó tr·ª£")) {
                reply = "B·∫°n c√¢y h·ªó tr·ª£ g√¨?.";
            }

            return reply;
        } else if (data.error) {
            return `‚ùó L·ªói t·ª´ Gemini: ${data.error.message}`;
        } else {
            return "‚ùó Kh√¥ng c√≥ ph·∫£n h·ªìi t·ª´ AI.";
        }
    } catch (error) {
        console.error("L·ªói khi g·ªçi Gemini:", error);
        return "‚ùó ƒê√£ c√≥ l·ªói x·∫£y ra khi k·∫øt n·ªëi t·ªõi Gemini.";
    }
}


function getOfflineResponse(message) {
    message = message.toLowerCase();
    for (const item of responsesData) {
        for (const key of item.keywords) {
            if (message.includes(key)) {
                const reply = item.replies[Math.floor(Math.random() * item.replies.length)];
                return reply;
            }
        }
    }
    return "‚ùó Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y.";
}

setTimeout(() => {
    getOfflineResponse('message');
}, 1000);
